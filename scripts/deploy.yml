---
- hosts: all
  become_method: sudo
  become: yes
  gather_facts: False


  vars:
    user: ubuntu
    project_name: "library"
    server_name: "demo.avilpage.com"
    local_bin: "/usr/local/bin"

    home: "/home/{{ user }}"
    venv_home: "{{ home }}/.virtualenvs"
    venv_bin: "{{ home }}/.virtualenvs/{{ project_name }}/bin"
    project_root: "{{ home }}/{{ project_name }}"
    local_project_root: "{{ playbook_dir | dirname }}"
    requirements: "{{ project_root }}/requirements.txt"
    settings: "library.settings.production"


  roles:
    # - aws


  tasks:

    - debug:
        msg: "{{ local_project_root }}"


    - name: rsync project to target host
      synchronize:
        src: "{{ local_project_root }}"
        dest: "{{ home }}"



    - name: install cli tools
      apt: name={{ item }} state=present
      with_items:
        - zsh
        - tree
        - byobu
        - nmap
        - software-properties-common


    - name: install server packages
      apt: name={{ item }} state=present
      with_items:
        - nginx


    - name: install python dependencies
      apt: name={{ item }} state=present
      with_items:
        - python3-virtualenv
        - python3-dev
        - python3-pip


    - name: install python package dependencies
      apt: name={{ item }} state=present
      with_items:
        - libssl-dev


    # - name: install ohmyzsh
      # command: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"


    # - name: create virtualenv and install requirements
    #   pip:
    #     requirements: "{{ project_root }}/requirements/production.txt"
    #     virtualenv: "{{ venv_home }}/{{ project_name }}"
    #     virtualenv_python: python3.5


    - name: install requirements
      command: pip3 install -r "{{ requirements }}"


    - name: migrate django application
      command:
        chdir="{{ project_root }}" python3 manage.py migrate --settings="{{ settings }}"


    - name: create gunicorn service
      template:
        src: gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
        mode: 0777


    - name: create nginx conf files
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default


    - name: reload systemd to reread configs
      systemd: daemon_reload=yes


    - name: restart gunicorn
      service: name=gunicorn state=restarted


    - name: restart nginx
      service: name=nginx state=restarted
